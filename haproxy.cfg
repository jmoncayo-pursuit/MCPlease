# HAProxy configuration for MCPlease MCP Server production deployment
# Load balancing with health checks and SSL termination

global
    # Logging
    log stdout format raw local0 info
    log-send-hostname
    
    # Performance tuning
    maxconn 10000
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # Security
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-verify none
    
    # Stats
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

defaults
    # Global defaults
    log global
    mode http
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    
    # Timeouts
    timeout connect 5s
    timeout client 50s
    timeout server 50s
    timeout http-request 10s
    timeout http-keep-alive 10s
    
    # Error handling
    option redispatch
    retries 3
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# Frontend for HTTP (redirect to HTTPS)
frontend http_front
    bind *:80
    mode http
    
    # Redirect all HTTP traffic to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Health check endpoint (allow HTTP for health checks)
    acl is_health_check path /health
    use_backend health_check if is_health_check

# Frontend for HTTPS
frontend https_front
    bind *:443 ssl crt /etc/ssl/private/mcplease.pem
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
    
    # ACLs for routing
    acl is_health_check path /health
    acl is_metrics path /metrics
    acl is_mcp path /mcp
    
    # Route health checks to dedicated backend
    use_backend health_check if is_health_check
    
    # Route metrics to monitoring backend
    use_backend monitoring if is_metrics
    
    # Route MCP traffic to load balanced backend
    use_backend mcplease_backend if is_mcp
    
    # Default to MCP backend
    default_backend mcplease_backend

# Backend for MCP server load balancing
backend mcplease_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    http-check expect string "healthy"
    
    # Load balancing algorithm
    balance roundrobin
    
    # Server definitions
    server mcplease-1 mcplease-mcp-1:8000 check inter 5s rise 2 fall 3 maxconn 500
    server mcplease-2 mcplease-mcp-2:8000 check inter 5s rise 2 fall 3 maxconn 500
    
    # Session persistence (optional)
    # stick-table type string len 32 size 100k expire 30m
    # stick match path,field(1,/)
    # stick store-request path,field(1,/)
    
    # Connection limits
    maxconn 1000
    
    # Timeouts
    timeout connect 5s
    timeout server 30s
    
    # Error handling
    option redispatch
    retries 3
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# Backend for health checks
backend health_check
    mode http
    option httpchk GET /health
    http-check expect status 200
    
    server health localhost:8000 check inter 1s rise 1 fall 1
    
    # Return health status
    http-response set-status 200
    http-response set-header Content-Type application/json
    http-response set-body '{"status":"healthy","timestamp":"%[date,http]","haproxy":"%[var(process_num)]"}'

# Backend for monitoring/metrics
backend monitoring
    mode http
    option httpchk GET /metrics
    http-check expect status 200
    
    # Route to first available MCP server
    server metrics mcplease-mcp-1:8000 check inter 5s rise 2 fall 3
    
    # Add monitoring headers
    http-response set-header X-Monitoring true
    http-response set-header X-HAProxy-Instance %[var(process_num)]

# Stats interface
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats show-legends
    stats admin if TRUE
    
    # Basic authentication for stats
    stats auth admin:admin123
    
    # Stats scope
    stats scope global
